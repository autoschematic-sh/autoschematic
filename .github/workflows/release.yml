name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Check version alignment
      run: |
        META_VERSION=$(cat VERSION)

        CRATE_VERSION=$(toml get --toml-path autoschematic-core/Cargo.toml package.version)
        python scripts/version_check.py $META_VERSION $CRATE_VERSION

        CRATE_VERSION=$(toml get --toml-path autoschematic/Cargo.toml package.version)
        python scripts/version_check.py $META_VERSION $CRATE_VERSION

        CRATE_VERSION=$(toml get --toml-path autoschematic-lsp/Cargo.toml package.version)
        python scripts/version_check.py $META_VERSION $CRATE_VERSION

        CRATE_VERSION=$(toml get --toml-path autoschematic-server/Cargo.toml package.version)
        python scripts/version_check.py $META_VERSION $CRATE_VERSION

        python scripts/version_check.py $META_VERSION ${{ needs.create-release.outputs.version }}

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \['"${{ steps.get_version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: autoschematic-${{ needs.create-release.outputs.version }}-linux-x86_64.tar.gz
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   asset_name: autoschematic-${{ needs.create-release.outputs.version }}-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: autoschematic-${{ needs.create-release.outputs.version }}-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: autoschematic-${{ needs.create-release.outputs.version }}-macos-aarch64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.x"
        include-pre-releases: false
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binaries
      run: |
        cargo build --release --target ${{ matrix.target }} --bin autoschematic

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/autoschematic release/
        cp README.md LICENSE release/
        cd release
        tar -czf ../${{ matrix.asset_name }} *

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        cp target/${{ matrix.target }}/release/autoschematic.exe release/
        cp README.md,LICENSE release/
        Compress-Archive -Path release/* -DestinationPath ${{ matrix.asset_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to Crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.x"
        include-pre-releases: false
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish autoschematic-core
      run: cargo publish --package autoschematic-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Wait for autoschematic-core to be available
      run: sleep 30

    - name: Publish autoschematic
      run: cargo publish --package autoschematic --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Publish autoschematic-server
      run: cargo publish --package autoschematic-server --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Publish autoschematic-lsp
      run: cargo publish --package autoschematic-lsp --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Server image
      uses: docker/build-push-action@v5
      with:
        context: ./autoschematic-server
        file: ./autoschematic-server/Dockerfile
        push: true
        tags: |
          autoschematic/autoschematic-server:latest
          autoschematic/autoschematic-server:${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64
