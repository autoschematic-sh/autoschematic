syntax = "proto3";
package connector;

/// A generic empty message (was google.protobuf.Empty)
message Empty {}

/// --- Filter ---
message FilterRequest  { string addr = 1; }
enum FilterOutputType {
  CONFIG   = 0;
  RESOURCE = 1;
  BUNDLE   = 2;
  NONE     = 3;
}
message FilterResponse { FilterOutputType filter = 1; }

/// --- Listing ---
message ListRequest  { string subpath = 1; }
message ListResponse { repeated string addrs = 1; }

/// --- Get resource ---
message GetRequest {
  string addr = 1;
}
message GetResponse {
  /// false ⇒ no resource at `addr`; other fields ignored
  bool   exists              = 1;
  bytes  resource_definition = 2;
  map<string,string> outputs = 3;
}

/// --- Plan ---
message PlanRequest {
  string addr    = 1;
  bytes  current = 2;  // empty means “none”
  bytes  desired = 3;  // empty means “none”
}
message OpPlanOutput {
  string            op_definition    = 1;
  repeated string   writes_outputs   = 2;
  string            friendly_message = 3;
}
message PlanResponse {
  repeated OpPlanOutput ops = 1;
}

/// --- Execute an op ---
message OpExecRequest {
  string addr = 1;
  string op   = 2;
}
message OpExecResponse {
  map<string,string> outputs          = 1;  // missing or empty ⇒ none
  string             friendly_message = 2;
}

/// --- Address translation ---
message AddrRequest {
  string addr = 1;
}
message AddrPhyToVirtResponse {
  bool   has_virt  = 1;
  string virt_addr = 2;
}

/// --- Subpaths (parallelism hints) ---
message SubpathsResponse {
  repeated string subpaths = 1;
}

/// --- Skeletons (templates) ---
message SkeletonOutput {
  string addr = 1;
  bytes  body = 2;
}
message GetSkeletonsResponse {
  repeated SkeletonOutput skeletons = 1;
}

/// --- Docstrings ---
message StructIdent { string name = 1; }
message FieldIdent  { string parent = 1; string name = 2; }
message DocIdent {
  oneof ident {
    StructIdent struct = 1;
    FieldIdent  field  = 2;
  }
}
message GetDocRequest {
  string   addr  = 1;
  DocIdent ident = 2;
}
message GetDocResponse {
  bool   has_doc = 1;
  string markdown = 2;
}

/// --- Equality check ---
message EqRequest {
  string addr = 1;
  bytes  a    = 2;
  bytes  b    = 3;
}
message EqResponse {
  bool equal = 1;
}

/// --- Diagnostics ---
message DiagnosticPosition {
  uint32 line = 1;
  uint32 col  = 2;
}
message DiagnosticSpan {
  DiagnosticPosition start = 1;
  DiagnosticPosition end   = 2;
}
message Diagnostic {
  uint32          severity = 1;
  DiagnosticSpan  span     = 2;
  string          message  = 3;
}
message DiagnosticOutput {
  repeated Diagnostic diagnostics = 1;
}
message DiagRequest {
  string addr = 1;
  bytes  a    = 2;
}
message DiagResponse {
  DiagnosticOutput diagnostics = 1;
}

/// --- Virt‐to‐phy mapping ---
message ReadOutput {
  string addr = 1;
  string key  = 2;
}
message Deferred {
  repeated ReadOutput reads = 1;
}
message Path {
  string path = 1;
}
message VirtToPhyOutput {
  oneof result {
    Empty    not_present = 1;
    Deferred deferred    = 2;
    Path     present     = 3;
    Path     null        = 4;
  }
}

/// --- Unbundle bundles into resources ---
message UnbundleRequest {
  string addr   = 1;
  bytes  bundle = 2;
}
message BundleOutput {
  string filename      = 1;
  string file_contents = 2;
}
message UnbundleResponse {
  repeated BundleOutput bundles = 1;
}

/// --- The Connector gRPC service ---
service Connector {
  rpc Init            (Empty)               returns (Empty);
  rpc Filter          (FilterRequest)       returns (FilterResponse);
  rpc List            (ListRequest)         returns (ListResponse);
  rpc Subpaths        (Empty)               returns (SubpathsResponse);
  rpc Get             (GetRequest)          returns (GetResponse);
  rpc Plan            (PlanRequest)         returns (PlanResponse);
  rpc OpExec          (OpExecRequest)       returns (OpExecResponse);
  rpc AddrVirtToPhy   (AddrRequest)         returns (VirtToPhyOutput);
  rpc AddrPhyToVirt   (AddrRequest)         returns (AddrPhyToVirtResponse);
  rpc GetSkeletons    (Empty)               returns (GetSkeletonsResponse);
  rpc GetDocstring    (GetDocRequest)       returns (GetDocResponse);
  rpc Eq              (EqRequest)           returns (EqResponse);
  rpc Diag            (DiagRequest)         returns (DiagResponse);
  rpc Unbundle        (UnbundleRequest)     returns (UnbundleResponse);
}
