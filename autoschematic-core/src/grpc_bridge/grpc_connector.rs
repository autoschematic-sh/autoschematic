// This file is @generated by prost-build.
/// Basic path message for file paths
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Path {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Request with a path parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PathRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Response containing a boolean result
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoolResponse {
    #[prost(bool, tag = "1")]
    pub result: bool,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// Response containing a list of paths
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PathListResponse {
    #[prost(string, repeated, tag = "1")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// Response for Get method, containing optional resource output
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResourceResponse {
    #[prost(bool, tag = "1")]
    pub has_resource: bool,
    #[prost(message, optional, tag = "2")]
    pub resource: ::core::option::Option<GetResourceOutput>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// GetResourceOutput struct definition
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResourceOutput {
    #[prost(string, tag = "1")]
    pub resource_definition: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "2")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        OptionalString,
    >,
}
/// Optional string for outputs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalString {
    #[prost(bool, tag = "1")]
    pub has_value: bool,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
/// Request for Plan method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlanRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub has_current: bool,
    #[prost(string, tag = "3")]
    pub current: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub has_desired: bool,
    #[prost(string, tag = "5")]
    pub desired: ::prost::alloc::string::String,
}
/// Response containing a list of OpPlanOutput
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpPlanOutputListResponse {
    #[prost(message, repeated, tag = "1")]
    pub ops: ::prost::alloc::vec::Vec<OpPlanOutput>,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// OpPlanOutput struct definition
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpPlanOutput {
    #[prost(string, tag = "1")]
    pub op_definition: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub has_friendly_message: bool,
    #[prost(string, tag = "3")]
    pub friendly_message: ::prost::alloc::string::String,
}
/// Request for OpExec method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpExecRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub op: ::prost::alloc::string::String,
}
/// Response for OpExec
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpExecResponse {
    #[prost(message, optional, tag = "1")]
    pub output: ::core::option::Option<OpExecOutput>,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// OpExecOutput struct definition
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpExecOutput {
    #[prost(map = "string, message", tag = "1")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        OptionalString,
    >,
    #[prost(bool, tag = "2")]
    pub has_friendly_message: bool,
    #[prost(string, tag = "3")]
    pub friendly_message: ::prost::alloc::string::String,
}
/// Response containing an optional path
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalPathResponse {
    #[prost(bool, tag = "1")]
    pub has_path: bool,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ErrorMessage>,
}
/// Error message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorMessage {
    #[prost(bool, tag = "1")]
    pub has_error: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod grpc_connector_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service definition
    #[derive(Debug, Clone)]
    pub struct GrpcConnectorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GrpcConnectorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GrpcConnectorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GrpcConnectorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GrpcConnectorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Filter determines if the connector should process this address
        pub async fn filter(
            &mut self,
            request: impl tonic::IntoRequest<super::PathRequest>,
        ) -> std::result::Result<tonic::Response<super::BoolResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/Filter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "Filter"));
            self.inner.unary(req, path, codec).await
        }
        /// List all "extant" object paths in the given subpath
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::PathRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PathListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "List"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the current state of the object at address
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::PathRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetResourceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "Get"));
            self.inner.unary(req, path, codec).await
        }
        /// Plan how to set current -> desired
        pub async fn plan(
            &mut self,
            request: impl tonic::IntoRequest<super::PlanRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpPlanOutputListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/Plan",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "Plan"));
            self.inner.unary(req, path, codec).await
        }
        /// Execute an operation
        pub async fn op_exec(
            &mut self,
            request: impl tonic::IntoRequest<super::OpExecRequest>,
        ) -> std::result::Result<tonic::Response<super::OpExecResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/OpExec",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "OpExec"));
            self.inner.unary(req, path, codec).await
        }
        /// Convert virtual address to physical address
        pub async fn addr_virt_to_phy(
            &mut self,
            request: impl tonic::IntoRequest<super::PathRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptionalPathResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.GrpcConnector/AddrVirtToPhy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.GrpcConnector", "AddrVirtToPhy"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod grpc_connector_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;

    use super::{BoolResponse, PathRequest};
    /// Generated trait containing gRPC methods that should be implemented for use with GrpcConnectorServer.
    #[async_trait]
    pub trait GrpcConnector: std::marker::Send + std::marker::Sync + 'static {
        /// Filter determines if the connector should process this address
        async fn filter(
            &self,
            request: tonic::Request<PathRequest>,
        ) -> std::result::Result<tonic::Response<BoolResponse>, tonic::Status>;
        /// List all "extant" object paths in the given subpath
        async fn list(
            &self,
            request: tonic::Request<PathRequest>,
        ) -> std::result::Result<
            tonic::Response<PathListResponse>,
            tonic::Status,
        >;
        /// Get the current state of the object at address
        async fn get(
            &self,
            request: tonic::Request<PathRequest>,
        ) -> std::result::Result<
            tonic::Response<GetResourceResponse>,
            tonic::Status,
        >;
        /// Plan how to set current -> desired
        async fn plan(
            &self,
            request: tonic::Request<PlanRequest>,
        ) -> std::result::Result<
            tonic::Response<OpPlanOutputListResponse>,
            tonic::Status,
        >;
        /// Execute an operation
        async fn op_exec(
            &self,
            request: tonic::Request<OpExecRequest>,
        ) -> std::result::Result<tonic::Response<OpExecResponse>, tonic::Status>;
        /// Convert virtual address to physical address
        async fn addr_virt_to_phy(
            &self,
            request: tonic::Request<PathRequest>,
        ) -> std::result::Result<
            tonic::Response<OptionalPathResponse>,
            tonic::Status,
        >;
    }
    /// Service definition
    #[derive(Debug)]
    pub struct GrpcConnectorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GrpcConnectorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GrpcConnectorServer<T>
    where
        T: GrpcConnector,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/connector.GrpcConnector/Filter" => {
                    #[allow(non_camel_case_types)]
                    struct FilterSvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::PathRequest> for FilterSvc<T> {
                        type Response = super::BoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PathRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::filter(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FilterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.GrpcConnector/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::PathRequest> for ListSvc<T> {
                        type Response = super::PathListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PathRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.GrpcConnector/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::PathRequest> for GetSvc<T> {
                        type Response = super::GetResourceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PathRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.GrpcConnector/Plan" => {
                    #[allow(non_camel_case_types)]
                    struct PlanSvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::PlanRequest> for PlanSvc<T> {
                        type Response = super::OpPlanOutputListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PlanRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::plan(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PlanSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.GrpcConnector/OpExec" => {
                    #[allow(non_camel_case_types)]
                    struct OpExecSvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::OpExecRequest>
                    for OpExecSvc<T> {
                        type Response = super::OpExecResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpExecRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::op_exec(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = OpExecSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.GrpcConnector/AddrVirtToPhy" => {
                    #[allow(non_camel_case_types)]
                    struct AddrVirtToPhySvc<T: GrpcConnector>(pub Arc<T>);
                    impl<
                        T: GrpcConnector,
                    > tonic::server::UnaryService<super::PathRequest>
                    for AddrVirtToPhySvc<T> {
                        type Response = super::OptionalPathResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PathRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GrpcConnector>::addr_virt_to_phy(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddrVirtToPhySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for GrpcConnectorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "connector.GrpcConnector";
    impl<T> tonic::server::NamedService for GrpcConnectorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
