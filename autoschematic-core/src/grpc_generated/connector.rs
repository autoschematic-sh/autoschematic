// This file is @generated by prost-build.
/// / A generic empty message (was google.protobuf.Empty)
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Empty {}
/// / --- Filter ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FilterRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FilterResponse {
    #[prost(uint32, tag = "1")]
    pub bitmask: u32,
}
/// / --- Listing ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListRequest {
    #[prost(string, tag = "1")]
    pub subpath: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListResponse {
    #[prost(string, repeated, tag = "1")]
    pub addrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// / --- Get resource ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    /// / false ⇒ no resource at `addr`; other fields ignored
    #[prost(bool, tag = "1")]
    pub exists: bool,
    #[prost(bytes = "vec", tag = "2")]
    pub resource_definition: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, string", tag = "3")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// / --- Plan ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlanRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    /// empty means “none”
    #[prost(bytes = "vec", tag = "2")]
    pub current: ::prost::alloc::vec::Vec<u8>,
    /// empty means “none”
    #[prost(bytes = "vec", tag = "3")]
    pub desired: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlanResponseElement {
    #[prost(string, tag = "1")]
    pub op_definition: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub writes_outputs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub friendly_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlanResponse {
    #[prost(message, repeated, tag = "1")]
    pub ops: ::prost::alloc::vec::Vec<PlanResponseElement>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OpExecRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub op: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpExecResponse {
    #[prost(map = "string, string", tag = "1")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "2")]
    pub friendly_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddrPhyToVirtRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddrPhyToVirtResponse {
    #[prost(bool, tag = "1")]
    pub has_virt: bool,
    #[prost(string, tag = "2")]
    pub virt_addr: ::prost::alloc::string::String,
}
/// / --- Virt‐to‐phy mapping ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddrVirtToPhyRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ReadOutput {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deferred {
    #[prost(message, repeated, tag = "1")]
    pub reads: ::prost::alloc::vec::Vec<ReadOutput>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Path {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddrVirtToPhyResponse {
    #[prost(oneof = "addr_virt_to_phy_response::Result", tags = "1, 2, 3, 4")]
    pub result: ::core::option::Option<addr_virt_to_phy_response::Result>,
}
/// Nested message and enum types in `AddrVirtToPhyResponse`.
pub mod addr_virt_to_phy_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        NotPresent(super::Empty),
        #[prost(message, tag = "2")]
        Deferred(super::Deferred),
        #[prost(message, tag = "3")]
        Present(super::Path),
        #[prost(message, tag = "4")]
        Null(super::Path),
    }
}
/// / --- Subpaths (parallelism hints) ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubpathsResponse {
    #[prost(string, repeated, tag = "1")]
    pub subpaths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// / --- Skeletons (templates) ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Skeleton {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSkeletonsResponse {
    #[prost(message, repeated, tag = "1")]
    pub skeletons: ::prost::alloc::vec::Vec<Skeleton>,
}
/// / --- Docstrings ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StructIdent {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FieldIdent {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DocIdent {
    #[prost(oneof = "doc_ident::Ident", tags = "1, 2")]
    pub ident: ::core::option::Option<doc_ident::Ident>,
}
/// Nested message and enum types in `DocIdent`.
pub mod doc_ident {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Ident {
        #[prost(message, tag = "1")]
        Struct(super::StructIdent),
        #[prost(message, tag = "2")]
        Field(super::FieldIdent),
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetDocRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub ident: ::core::option::Option<DocIdent>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetDocResponse {
    #[prost(bool, tag = "1")]
    pub has_doc: bool,
    #[prost(string, tag = "2")]
    pub markdown: ::prost::alloc::string::String,
}
/// / --- Equality check ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EqRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub a: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub b: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EqResponse {
    #[prost(bool, tag = "1")]
    pub equal: bool,
}
/// / --- Diagnostics ---
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DiagnosticPosition {
    #[prost(uint32, tag = "1")]
    pub line: u32,
    #[prost(uint32, tag = "2")]
    pub col: u32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DiagnosticSpan {
    #[prost(message, optional, tag = "1")]
    pub start: ::core::option::Option<DiagnosticPosition>,
    #[prost(message, optional, tag = "2")]
    pub end: ::core::option::Option<DiagnosticPosition>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Diagnostic {
    #[prost(uint32, tag = "1")]
    pub severity: u32,
    #[prost(message, optional, tag = "2")]
    pub span: ::core::option::Option<DiagnosticSpan>,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DiagRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub a: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagResponse {
    #[prost(message, repeated, tag = "1")]
    pub diagnostics: ::prost::alloc::vec::Vec<Diagnostic>,
}
/// / --- Unbundle bundles into resources ---
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnbundleRequest {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub bundle: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnbundleResponseElement {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub contents: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnbundleResponse {
    #[prost(message, repeated, tag = "1")]
    pub bundles: ::prost::alloc::vec::Vec<UnbundleResponseElement>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FilterResponseType {
    None = 0,
    Config = 1,
    Resource = 2,
    Bundle = 4,
    Task = 8,
    Metric = 16,
}
impl FilterResponseType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::Config => "CONFIG",
            Self::Resource => "RESOURCE",
            Self::Bundle => "BUNDLE",
            Self::Task => "TASK",
            Self::Metric => "METRIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "CONFIG" => Some(Self::Config),
            "RESOURCE" => Some(Self::Resource),
            "BUNDLE" => Some(Self::Bundle),
            "TASK" => Some(Self::Task),
            "METRIC" => Some(Self::Metric),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod connector_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// / --- The Connector gRPC service ---
    #[derive(Debug, Clone)]
    pub struct ConnectorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ConnectorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ConnectorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ConnectorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ConnectorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn init(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/Init");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "Init"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn filter(
            &mut self,
            request: impl tonic::IntoRequest<super::FilterRequest>,
        ) -> std::result::Result<tonic::Response<super::FilterResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/Filter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "Filter"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/List");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "List"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn subpaths(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::SubpathsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/Subpaths",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "Subpaths"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/Get");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "Get"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn plan(
            &mut self,
            request: impl tonic::IntoRequest<super::PlanRequest>,
        ) -> std::result::Result<tonic::Response<super::PlanResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/Plan");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "Plan"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn op_exec(
            &mut self,
            request: impl tonic::IntoRequest<super::OpExecRequest>,
        ) -> std::result::Result<tonic::Response<super::OpExecResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/OpExec",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "OpExec"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn addr_virt_to_phy(
            &mut self,
            request: impl tonic::IntoRequest<super::AddrVirtToPhyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddrVirtToPhyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/AddrVirtToPhy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "AddrVirtToPhy"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn addr_phy_to_virt(
            &mut self,
            request: impl tonic::IntoRequest<super::AddrPhyToVirtRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddrPhyToVirtResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/AddrPhyToVirt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "AddrPhyToVirt"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_skeletons(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::GetSkeletonsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/GetSkeletons",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "GetSkeletons"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_docstring(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDocRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDocResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/GetDocstring",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "GetDocstring"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn eq(
            &mut self,
            request: impl tonic::IntoRequest<super::EqRequest>,
        ) -> std::result::Result<tonic::Response<super::EqResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/Eq");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "Eq"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn diag(
            &mut self,
            request: impl tonic::IntoRequest<super::DiagRequest>,
        ) -> std::result::Result<tonic::Response<super::DiagResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/connector.Connector/Diag");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("connector.Connector", "Diag"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unbundle(
            &mut self,
            request: impl tonic::IntoRequest<super::UnbundleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnbundleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/connector.Connector/Unbundle",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("connector.Connector", "Unbundle"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod connector_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ConnectorServer.
    #[async_trait]
    pub trait Connector: std::marker::Send + std::marker::Sync + 'static {
        async fn init(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        async fn filter(
            &self,
            request: tonic::Request<super::FilterRequest>,
        ) -> std::result::Result<tonic::Response<super::FilterResponse>, tonic::Status>;
        async fn list(
            &self,
            request: tonic::Request<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status>;
        async fn subpaths(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::SubpathsResponse>,
            tonic::Status,
        >;
        async fn get(
            &self,
            request: tonic::Request<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status>;
        async fn plan(
            &self,
            request: tonic::Request<super::PlanRequest>,
        ) -> std::result::Result<tonic::Response<super::PlanResponse>, tonic::Status>;
        async fn op_exec(
            &self,
            request: tonic::Request<super::OpExecRequest>,
        ) -> std::result::Result<tonic::Response<super::OpExecResponse>, tonic::Status>;
        async fn addr_virt_to_phy(
            &self,
            request: tonic::Request<super::AddrVirtToPhyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddrVirtToPhyResponse>,
            tonic::Status,
        >;
        async fn addr_phy_to_virt(
            &self,
            request: tonic::Request<super::AddrPhyToVirtRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddrPhyToVirtResponse>,
            tonic::Status,
        >;
        async fn get_skeletons(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::GetSkeletonsResponse>,
            tonic::Status,
        >;
        async fn get_docstring(
            &self,
            request: tonic::Request<super::GetDocRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDocResponse>, tonic::Status>;
        async fn eq(
            &self,
            request: tonic::Request<super::EqRequest>,
        ) -> std::result::Result<tonic::Response<super::EqResponse>, tonic::Status>;
        async fn diag(
            &self,
            request: tonic::Request<super::DiagRequest>,
        ) -> std::result::Result<tonic::Response<super::DiagResponse>, tonic::Status>;
        async fn unbundle(
            &self,
            request: tonic::Request<super::UnbundleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnbundleResponse>,
            tonic::Status,
        >;
    }
    /// / --- The Connector gRPC service ---
    #[derive(Debug)]
    pub struct ConnectorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ConnectorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ConnectorServer<T>
    where
        T: Connector,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/connector.Connector/Init" => {
                    #[allow(non_camel_case_types)]
                    struct InitSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::Empty>
                    for InitSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::init(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Filter" => {
                    #[allow(non_camel_case_types)]
                    struct FilterSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::FilterRequest>
                    for FilterSvc<T> {
                        type Response = super::FilterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FilterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::filter(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FilterSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::ListRequest>
                    for ListSvc<T> {
                        type Response = super::ListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Subpaths" => {
                    #[allow(non_camel_case_types)]
                    struct SubpathsSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::Empty>
                    for SubpathsSvc<T> {
                        type Response = super::SubpathsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::subpaths(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubpathsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::GetRequest>
                    for GetSvc<T> {
                        type Response = super::GetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Plan" => {
                    #[allow(non_camel_case_types)]
                    struct PlanSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::PlanRequest>
                    for PlanSvc<T> {
                        type Response = super::PlanResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PlanRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::plan(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PlanSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/OpExec" => {
                    #[allow(non_camel_case_types)]
                    struct OpExecSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::OpExecRequest>
                    for OpExecSvc<T> {
                        type Response = super::OpExecResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpExecRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::op_exec(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = OpExecSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/AddrVirtToPhy" => {
                    #[allow(non_camel_case_types)]
                    struct AddrVirtToPhySvc<T: Connector>(pub Arc<T>);
                    impl<
                        T: Connector,
                    > tonic::server::UnaryService<super::AddrVirtToPhyRequest>
                    for AddrVirtToPhySvc<T> {
                        type Response = super::AddrVirtToPhyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddrVirtToPhyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::addr_virt_to_phy(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddrVirtToPhySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/AddrPhyToVirt" => {
                    #[allow(non_camel_case_types)]
                    struct AddrPhyToVirtSvc<T: Connector>(pub Arc<T>);
                    impl<
                        T: Connector,
                    > tonic::server::UnaryService<super::AddrPhyToVirtRequest>
                    for AddrPhyToVirtSvc<T> {
                        type Response = super::AddrPhyToVirtResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddrPhyToVirtRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::addr_phy_to_virt(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddrPhyToVirtSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/GetSkeletons" => {
                    #[allow(non_camel_case_types)]
                    struct GetSkeletonsSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::Empty>
                    for GetSkeletonsSvc<T> {
                        type Response = super::GetSkeletonsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::get_skeletons(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSkeletonsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/GetDocstring" => {
                    #[allow(non_camel_case_types)]
                    struct GetDocstringSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::GetDocRequest>
                    for GetDocstringSvc<T> {
                        type Response = super::GetDocResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDocRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::get_docstring(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDocstringSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Eq" => {
                    #[allow(non_camel_case_types)]
                    struct EqSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::EqRequest>
                    for EqSvc<T> {
                        type Response = super::EqResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EqRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::eq(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EqSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Diag" => {
                    #[allow(non_camel_case_types)]
                    struct DiagSvc<T: Connector>(pub Arc<T>);
                    impl<T: Connector> tonic::server::UnaryService<super::DiagRequest>
                    for DiagSvc<T> {
                        type Response = super::DiagResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DiagRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::diag(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DiagSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/connector.Connector/Unbundle" => {
                    #[allow(non_camel_case_types)]
                    struct UnbundleSvc<T: Connector>(pub Arc<T>);
                    impl<
                        T: Connector,
                    > tonic::server::UnaryService<super::UnbundleRequest>
                    for UnbundleSvc<T> {
                        type Response = super::UnbundleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnbundleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Connector>::unbundle(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnbundleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ConnectorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "connector.Connector";
    impl<T> tonic::server::NamedService for ConnectorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
